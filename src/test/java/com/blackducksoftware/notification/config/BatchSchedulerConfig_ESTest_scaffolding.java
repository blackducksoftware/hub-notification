/**
 * hub-notification
 *
 * Copyright (C) 2017 Black Duck Software, Inc.
 * http://www.blackducksoftware.com/
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Sat Jun 10 07:54:06 GMT 2017
 */

package com.blackducksoftware.notification.config;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.evosuite.runtime.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@EvoSuiteClassExclude
public class BatchSchedulerConfig_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.blackducksoftware.notification.config.BatchSchedulerConfig"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("user.country", "US"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.timezone", "America/New_York"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(BatchSchedulerConfig_ESTest_scaffolding.class.getClassLoader() ,
      "org.springframework.util.ReflectionUtils$FieldFilter",
      "org.springframework.batch.core.Job",
      "org.springframework.aop.support.AopUtils",
      "org.springframework.util.ReflectionUtils$FieldCallback",
      "org.springframework.aop.framework.ReflectiveMethodInvocation",
      "org.springframework.batch.core.repository.support.AbstractJobRepositoryFactoryBean$1",
      "org.springframework.batch.core.repository.dao.MapStepExecutionDao",
      "org.springframework.transaction.support.TransactionSynchronizationManager",
      "org.springframework.transaction.TransactionSystemException",
      "org.springframework.dao.TransientDataAccessException",
      "org.springframework.core.InfrastructureProxy",
      "org.springframework.transaction.interceptor.TransactionInterceptor$1",
      "org.springframework.batch.core.repository.dao.StepExecutionDao",
      "org.springframework.batch.core.repository.dao.MapJobExecutionDao",
      "org.springframework.transaction.interceptor.TransactionAspectSupport",
      "org.springframework.aop.framework.AopProxyUtils",
      "org.springframework.core.task.TaskExecutor",
      "org.springframework.util.ConcurrentReferenceHashMap$Segment$1",
      "org.springframework.core.Constants",
      "org.springframework.transaction.CannotCreateTransactionException",
      "org.springframework.aop.framework.DefaultAopProxyFactory",
      "org.springframework.batch.core.JobParameters",
      "org.springframework.aop.ThrowsAdvice",
      "org.springframework.transaction.support.TransactionSynchronizationUtils$ScopedProxyUnwrapper",
      "org.springframework.util.ClassUtils",
      "org.springframework.transaction.interceptor.TransactionInterceptor",
      "org.springframework.aop.IntroductionAdvisor",
      "org.springframework.util.PatternMatchUtils",
      "org.springframework.transaction.support.ResourceHolder",
      "org.springframework.aop.framework.InterceptorAndDynamicMethodMatcher",
      "org.springframework.batch.core.Entity",
      "org.springframework.core.NamedThreadLocal",
      "org.springframework.aop.framework.ProxyConfig",
      "org.springframework.transaction.NoTransactionException",
      "org.springframework.aop.framework.adapter.MethodBeforeAdviceAdapter",
      "org.springframework.transaction.PlatformTransactionManager",
      "org.springframework.aop.scope.ScopedObject",
      "org.springframework.transaction.support.TransactionCallback",
      "org.springframework.util.ConcurrentReferenceHashMap$Task",
      "org.springframework.aop.ProxyMethodInvocation",
      "org.springframework.aop.TrueClassFilter",
      "org.springframework.batch.core.repository.dao.MapJobInstanceDao",
      "org.springframework.transaction.interceptor.TransactionAttribute",
      "org.springframework.core.Ordered",
      "org.springframework.dao.ConcurrencyFailureException",
      "org.springframework.transaction.interceptor.TransactionAspectSupport$TransactionInfo",
      "org.springframework.aop.PointcutAdvisor",
      "org.springframework.aop.framework.Advised",
      "org.springframework.aop.support.DefaultPointcutAdvisor",
      "org.springframework.transaction.IllegalTransactionStateException",
      "org.springframework.aop.framework.AdvisedSupport$MethodCacheKey",
      "org.springframework.batch.core.JobParametersInvalidException",
      "org.springframework.aop.framework.DefaultAdvisorChainFactory",
      "org.springframework.aop.IntroductionInfo",
      "org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager",
      "org.springframework.util.ReflectionUtils$MethodCallback",
      "org.springframework.aop.framework.AopProxy",
      "org.springframework.util.ConcurrentReferenceHashMap",
      "org.springframework.util.ConcurrentReferenceHashMap$ReferenceType",
      "org.aopalliance.intercept.Joinpoint",
      "org.springframework.aop.target.EmptyTargetSource",
      "org.aopalliance.intercept.Interceptor",
      "org.springframework.beans.factory.FactoryBean",
      "org.springframework.batch.core.repository.JobRepository",
      "org.springframework.beans.factory.BeanFactoryAware",
      "org.springframework.aop.framework.adapter.AdvisorAdapter",
      "org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean",
      "org.springframework.transaction.interceptor.TransactionAttributeSource",
      "org.springframework.aop.DynamicIntroductionAdvice",
      "org.aopalliance.aop.Advice",
      "org.springframework.scheduling.annotation.EnableScheduling",
      "org.springframework.util.ConcurrentReferenceHashMap$1",
      "org.springframework.util.ConcurrentReferenceHashMap$2",
      "org.springframework.transaction.interceptor.TransactionAttributeEditor",
      "org.springframework.util.ConcurrentReferenceHashMap$3",
      "org.springframework.util.ConcurrentReferenceHashMap$4",
      "org.springframework.aop.SpringProxy",
      "org.springframework.transaction.support.DelegatingTransactionDefinition",
      "org.springframework.aop.target.SingletonTargetSource",
      "org.springframework.context.annotation.Import",
      "org.springframework.util.ConcurrentReferenceHashMap$Entries",
      "org.springframework.core.DecoratingProxy",
      "org.aopalliance.intercept.Invocation",
      "org.springframework.batch.core.launch.JobLauncher",
      "org.springframework.batch.core.DefaultJobKeyGenerator",
      "org.springframework.batch.core.StepExecution",
      "org.springframework.batch.core.repository.JobInstanceAlreadyCompleteException",
      "org.springframework.batch.support.transaction.TransactionAwareProxyFactory$TransactionAwareInterceptor",
      "org.springframework.transaction.support.SmartTransactionObject",
      "org.springframework.util.ReflectionUtils$MethodFilter",
      "org.springframework.transaction.support.TransactionSynchronization",
      "org.springframework.aop.MethodBeforeAdvice",
      "org.springframework.aop.ClassFilter",
      "org.springframework.aop.framework.adapter.ThrowsAdviceAdapter",
      "org.springframework.aop.IntroductionAwareMethodMatcher",
      "org.springframework.transaction.TransactionException",
      "org.springframework.transaction.NestedTransactionNotSupportedException",
      "org.springframework.aop.framework.ProxyFactory",
      "org.springframework.util.ConcurrentReferenceHashMap$5",
      "org.springframework.aop.framework.AopProxyFactory",
      "org.springframework.aop.AfterReturningAdvice",
      "org.springframework.aop.framework.AdvisorChainFactory",
      "org.springframework.transaction.interceptor.TransactionAspectSupport$ThrowableHolderException",
      "org.springframework.aop.framework.JdkDynamicAopProxy",
      "org.springframework.util.ConcurrentReferenceHashMap$Reference",
      "org.springframework.aop.RawTargetAccess",
      "org.springframework.aop.TargetSource",
      "org.springframework.util.DefaultPropertiesPersister",
      "org.springframework.core.task.TaskRejectedException",
      "org.springframework.util.ConcurrentReferenceHashMap$Segment",
      "org.springframework.batch.core.JobInstance",
      "org.springframework.aop.framework.adapter.DefaultAdvisorAdapterRegistry",
      "org.springframework.batch.support.transaction.ResourcelessTransactionManager$ResourcelessTransaction",
      "org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource",
      "org.springframework.dao.OptimisticLockingFailureException",
      "org.aopalliance.intercept.MethodInvocation",
      "org.springframework.aop.framework.adapter.UnknownAdviceTypeException",
      "org.springframework.aop.BeforeAdvice",
      "org.springframework.util.ReflectionUtils$4",
      "org.springframework.aop.framework.adapter.AfterReturningAdviceAdapter",
      "com.blackducksoftware.notification.config.BatchSchedulerConfig",
      "org.springframework.batch.support.transaction.ResourcelessTransactionManager",
      "org.springframework.util.ReflectionUtils$6",
      "org.springframework.batch.core.repository.dao.MapExecutionContextDao",
      "org.springframework.util.ReflectionUtils$5",
      "org.springframework.batch.core.repository.dao.JobExecutionDao",
      "org.springframework.transaction.support.DefaultTransactionDefinition",
      "org.springframework.aop.MethodMatcher",
      "org.springframework.aop.framework.AdvisedSupport",
      "org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry",
      "org.springframework.aop.AopInvocationException",
      "org.springframework.batch.core.repository.support.AbstractJobRepositoryFactoryBean",
      "org.springframework.core.NestedRuntimeException",
      "org.springframework.transaction.support.CallbackPreferringPlatformTransactionManager",
      "org.springframework.aop.TrueMethodMatcher",
      "org.springframework.batch.core.launch.support.SimpleJobLauncher",
      "org.springframework.batch.core.repository.JobRestartException",
      "org.springframework.aop.support.AbstractGenericPointcutAdvisor",
      "org.springframework.transaction.UnexpectedRollbackException",
      "org.springframework.transaction.SavepointManager",
      "org.springframework.batch.core.JobExecution",
      "org.springframework.batch.support.PropertiesConverter",
      "org.springframework.aop.support.AbstractPointcutAdvisor",
      "org.springframework.aop.framework.adapter.AdvisorAdapterRegistry",
      "org.springframework.context.annotation.Configuration",
      "org.springframework.util.PropertiesPersister",
      "org.springframework.aop.support.MethodMatchers",
      "org.springframework.transaction.TransactionStatus",
      "org.springframework.batch.support.transaction.TransactionAwareProxyFactory",
      "org.springframework.batch.core.JobExecutionException",
      "org.apache.commons.logging.impl.Jdk14Logger",
      "org.springframework.aop.support.StaticMethodMatcher",
      "org.springframework.core.ConstantException",
      "org.springframework.batch.core.launch.NoSuchJobException",
      "org.springframework.dao.DataAccessException",
      "org.springframework.transaction.interceptor.DelegatingTransactionAttribute",
      "org.springframework.aop.Pointcut",
      "org.springframework.batch.core.repository.dao.ExecutionContextDao",
      "org.springframework.transaction.TransactionDefinition",
      "org.springframework.beans.factory.Aware",
      "org.springframework.core.BridgeMethodResolver",
      "org.springframework.beans.factory.InitializingBean",
      "org.springframework.aop.support.StaticMethodMatcherPointcut",
      "org.springframework.aop.TargetClassAware",
      "org.springframework.aop.framework.AopConfigException",
      "org.springframework.transaction.interceptor.RuleBasedTransactionAttribute",
      "org.springframework.batch.core.repository.dao.JobInstanceDao",
      "org.springframework.aop.Advisor",
      "org.springframework.transaction.support.DefaultTransactionStatus",
      "org.springframework.transaction.support.TransactionSynchronizationUtils",
      "org.springframework.transaction.interceptor.DefaultTransactionAttribute",
      "org.springframework.aop.framework.ProxyCreatorSupport",
      "org.springframework.transaction.TransactionSuspensionNotSupportedException",
      "org.springframework.transaction.support.AbstractPlatformTransactionManager",
      "org.springframework.transaction.TransactionUsageException",
      "org.springframework.aop.TruePointcut",
      "org.springframework.batch.core.repository.JobExecutionAlreadyRunningException",
      "org.springframework.batch.core.repository.support.SimpleJobRepository",
      "org.springframework.aop.support.NameMatchMethodPointcut",
      "org.springframework.batch.core.JobKeyGenerator",
      "org.springframework.transaction.interceptor.TransactionAspectSupport$InvocationCallback",
      "org.springframework.transaction.interceptor.TransactionAspectSupport$2",
      "org.aopalliance.intercept.MethodInterceptor",
      "org.springframework.stereotype.Component",
      "org.springframework.util.ReflectionUtils",
      "org.springframework.transaction.support.AbstractTransactionStatus",
      "org.springframework.transaction.InvalidTimeoutException",
      "org.springframework.aop.AfterAdvice",
      "org.springframework.util.Assert",
      "org.springframework.util.StringUtils"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(BatchSchedulerConfig_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.springframework.beans.factory.annotation.Autowire",
      "org.springframework.batch.core.repository.support.AbstractJobRepositoryFactoryBean",
      "org.apache.commons.logging.impl.Jdk14Logger",
      "org.springframework.batch.core.launch.support.SimpleJobLauncher",
      "org.springframework.util.ConcurrentReferenceHashMap$ReferenceType",
      "org.springframework.util.ConcurrentReferenceHashMap",
      "org.springframework.util.ConcurrentReferenceHashMap$Segment",
      "org.springframework.util.ReflectionUtils",
      "org.springframework.transaction.support.AbstractPlatformTransactionManager",
      "org.springframework.batch.support.transaction.ResourcelessTransactionManager",
      "org.springframework.aop.framework.ProxyConfig",
      "org.springframework.aop.target.EmptyTargetSource",
      "org.springframework.aop.framework.AdvisedSupport",
      "org.springframework.aop.framework.ProxyCreatorSupport",
      "org.springframework.aop.framework.ProxyFactory",
      "org.springframework.aop.framework.DefaultAdvisorChainFactory",
      "org.springframework.aop.framework.DefaultAopProxyFactory",
      "org.springframework.util.StringUtils",
      "org.springframework.transaction.interceptor.TransactionAspectSupport",
      "org.springframework.transaction.interceptor.TransactionInterceptor",
      "org.springframework.batch.support.PropertiesConverter",
      "org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource",
      "org.springframework.transaction.support.DefaultTransactionDefinition",
      "org.springframework.transaction.interceptor.DefaultTransactionAttribute",
      "org.springframework.transaction.interceptor.RuleBasedTransactionAttribute",
      "org.springframework.aop.support.AbstractPointcutAdvisor",
      "org.springframework.aop.support.AbstractGenericPointcutAdvisor",
      "org.springframework.aop.support.DefaultPointcutAdvisor",
      "org.springframework.aop.TruePointcut",
      "org.springframework.aop.Pointcut",
      "org.springframework.aop.support.NameMatchMethodPointcut",
      "org.springframework.aop.TrueClassFilter",
      "org.springframework.aop.ClassFilter",
      "org.springframework.batch.core.repository.support.SimpleJobRepository",
      "org.springframework.batch.core.repository.dao.MapJobInstanceDao",
      "org.springframework.aop.target.SingletonTargetSource",
      "org.springframework.util.ClassUtils",
      "org.springframework.aop.framework.JdkDynamicAopProxy",
      "org.springframework.batch.core.Entity",
      "org.springframework.batch.core.StepExecution",
      "org.springframework.batch.core.JobParameters",
      "org.springframework.batch.core.JobInstance",
      "org.springframework.batch.core.JobExecution",
      "org.springframework.aop.framework.adapter.DefaultAdvisorAdapterRegistry",
      "org.springframework.aop.framework.adapter.MethodBeforeAdviceAdapter",
      "org.springframework.aop.framework.adapter.AfterReturningAdviceAdapter",
      "org.springframework.aop.framework.adapter.ThrowsAdviceAdapter",
      "org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry",
      "org.springframework.aop.TrueMethodMatcher",
      "org.springframework.aop.MethodMatcher",
      "org.springframework.transaction.support.DelegatingTransactionDefinition",
      "org.springframework.transaction.interceptor.DelegatingTransactionAttribute",
      "org.springframework.transaction.interceptor.TransactionAspectSupport$2",
      "org.springframework.transaction.support.TransactionSynchronizationManager",
      "org.springframework.transaction.support.TransactionSynchronizationUtils"
    );
  }
}
