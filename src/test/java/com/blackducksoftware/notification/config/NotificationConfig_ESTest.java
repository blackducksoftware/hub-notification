/**
 * hub-notification
 *
 * Copyright (C) 2017 Black Duck Software, Inc.
 * http://www.blackducksoftware.com/
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 10 07:53:53 GMT 2017
 */

package com.blackducksoftware.notification.config;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.fail;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NotificationConfig_ESTest extends NotificationConfig_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NotificationConfig notificationConfig0 = new NotificationConfig();
      notificationConfig0.username = "-Dhttp.proxyPassword=";
      try { 
        notificationConfig0.getRestConnection();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid Configuration: PASSWORD = com.blackducksoftware.integration.validator.ValidationResult@0000000010
         // HUBURL = com.blackducksoftware.integration.validator.ValidationResult@0000000012
         // HUBTIMEOUT = com.blackducksoftware.integration.validator.ValidationResult@0000000013
         //
         verifyException("com.blackducksoftware.integration.builder.AbstractBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NotificationConfig notificationConfig0 = new NotificationConfig();
      notificationConfig0.serverurl = "6Q=I]m";
      try { 
        notificationConfig0.getHubServicesFactory();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid Configuration: USERNAME = com.blackducksoftware.integration.validator.ValidationResult@0000000010
         // PASSWORD = com.blackducksoftware.integration.validator.ValidationResult@0000000011
         // HUBURL = com.blackducksoftware.integration.validator.ValidationResult@0000000013
         // HUBTIMEOUT = com.blackducksoftware.integration.validator.ValidationResult@0000000014
         //
         verifyException("com.blackducksoftware.integration.builder.AbstractBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NotificationConfig notificationConfig0 = new NotificationConfig();
      notificationConfig0.password = "u4iB";
      // Undeclared exception!
      try { 
        notificationConfig0.getHubServerConfig();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid Configuration: USERNAME = com.blackducksoftware.integration.validator.ValidationResult@0000000009
         // HUBURL = com.blackducksoftware.integration.validator.ValidationResult@0000000011
         // HUBTIMEOUT = com.blackducksoftware.integration.validator.ValidationResult@0000000012
         //
         verifyException("com.blackducksoftware.integration.builder.AbstractBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NotificationConfig notificationConfig0 = new NotificationConfig();
      notificationConfig0.cronExpression = "";
      // Undeclared exception!
      try { 
        notificationConfig0.getHubServerConfig();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid Configuration: USERNAME = com.blackducksoftware.integration.validator.ValidationResult@0000000009
         // PASSWORD = com.blackducksoftware.integration.validator.ValidationResult@0000000010
         // HUBURL = com.blackducksoftware.integration.validator.ValidationResult@0000000012
         // HUBTIMEOUT = com.blackducksoftware.integration.validator.ValidationResult@0000000013
         //
         verifyException("com.blackducksoftware.integration.builder.AbstractBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NotificationConfig notificationConfig0 = new NotificationConfig();
      notificationConfig0.cronExpression = "oh{<rwb\"MVpIR4uO";
      String string0 = notificationConfig0.getCronExpression();
      assertEquals("oh{<rwb\"MVpIR4uO", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NotificationConfig notificationConfig0 = new NotificationConfig();
      notificationConfig0.cronExpression = "";
      String string0 = notificationConfig0.getCronExpression();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NotificationConfig notificationConfig0 = new NotificationConfig();
      String string0 = notificationConfig0.getCronExpression();
      assertNull(string0);
  }
}
