/**
 * hub-notification
 *
 * Copyright (C) 2017 Black Duck Software, Inc.
 * http://www.blackducksoftware.com/
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 10 07:55:04 GMT 2017
 */

package com.blackducksoftware.notification.batch.processor;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.evosuite.shaded.org.mockito.Mockito.doReturn;
import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.fail;

import java.util.SortedSet;
import java.util.function.Function;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.spi.LoggerContextFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.jms.core.JmsTemplate;

import com.blackducksoftware.integration.hub.dataservice.notification.NotificationResults;
import com.blackducksoftware.notification.config.JMSConfig;
import com.blackducksoftware.notification.config.NotificationConfig;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NotificationProcessor_ESTest extends NotificationProcessor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NotificationConfig notificationConfig0 = mock(NotificationConfig.class, new ViolatedAssumptionAnswer());
      JmsTemplate jmsTemplate0 = mock(JmsTemplate.class, new ViolatedAssumptionAnswer());
      JMSConfig jMSConfig0 = mock(JMSConfig.class, new ViolatedAssumptionAnswer());
      NotificationProcessor notificationProcessor0 = new NotificationProcessor(notificationConfig0, jMSConfig0);
      LoggerContextFactory loggerContextFactory0 = mock(LoggerContextFactory.class, new ViolatedAssumptionAnswer());
      LogManager.setFactory(loggerContextFactory0);
      Function<Integer, Object> function0 = (Function<Integer, Object>) mock(Function.class, new ViolatedAssumptionAnswer());
      notificationProcessor0.distinctByKey((Function<? super Integer, Object>) function0);
      NotificationResults notificationResults0 = mock(NotificationResults.class, new ViolatedAssumptionAnswer());
      NotificationResults notificationResults1 = mock(NotificationResults.class, new ViolatedAssumptionAnswer());
      doReturn((SortedSet) null).when(notificationResults1).getNotificationContentItems();
      try { 
        notificationProcessor0.process(notificationResults1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.blackducksoftware.notification.batch.processor.NotificationProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LogManager.setFactory((LoggerContextFactory) null);
      JMSConfig jMSConfig0 = new JMSConfig();
      NotificationProcessor notificationProcessor0 = null;
      try {
        notificationProcessor0 = new NotificationProcessor((NotificationConfig) null, jMSConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.logging.log4j.LogManager", e);
      }
  }
}
